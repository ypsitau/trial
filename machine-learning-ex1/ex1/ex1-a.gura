#!/usr/bin/env gura
import(csv)
import(conio)
import(arrayutil)

computeCost(X:array, y:array, theta:array) = {
	// X = [[1  x1(1), x2(1), x3(1)]   y = [[y(1)]   theta = [[t0]
	//      [1  x1(2), x2(2), x3(2)]        [y(2)]            [t1]
	//      [1  x1(3), x2(3), x3(3)]        [y(3)]            [t2]
	//      [1  x1(4), x2(4), x3(4)]        [y(4)]            [t3]]
	//      [1  x1(5), x2(5), x3(5)]]       [y(4)]]
	h = X |.| theta
	((h - y) ** 2).sum() / (2 * X.shape[0])
}

gradientDescent(X:array, y:array, theta:array, alpha:number, num_iters:number) = {
	m = y.shape[0]
	repeat (num_iters) {
		h = X |.| theta;
		theta = theta - alpha * (X.T |.| (h - y)) / m;
	}
	theta
}

data = array.read@csv('ex1data1.txt')
len = data.shape[0]
X = array.ones([len, 2])
x = data[*, 0].reshape([nil, 1])
X[*, 1] = (x - x.mean(0)) / x.std(0)
y = data[*, 1].reshape([nil, 1])
theta = array.zeros([data.shape[1], 1])
println(computeCost(X, y, theta))
alpha = .01
num_iters = 1500
theta = gradientDescent(X, y, theta, alpha, num_iters)
println(theta)
