#!/usr/bin/env gura
import(re)
import(wx)
import(jpeg)
import(resource)
import(translate)

App = class(wx.App) {
	public {
		cfg
	}
	OnInit() = {
		this.cfg = %{}
		this.cfg['dirNameStorage'] = '/Users/ypsitau/Pictures'
		frame = MainFrame()
		frame.Show()
		true
	}
}

PatternEditorPanel = class(wx.Panel) {
	TimerId = 1
	YYYY = '2015'
	YY = '15'
	MM = '03'
	DD = '21'
	hh = '13'
	mm = '24'
	ss = '47'
	SEQ = 'AA'
	__init__(parent:wx.Windowm) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		str = '${YYYY}/${YYYY}${MM}${DD}/${YYYY}_${MM}${DD}_${hh}${mm}${ss}${SEQ}'
		wx.TextCtrl(this, wx.ID_ANY, str) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			ctrl.Bind(wx.EVT_TEXT) {|event| this.OnText(event)}
			this.textEnter = ctrl
		}
		wx.StaticText(this, wx.ID_ANY,
					  format('Sample: '$ + '%s-%s-%s %s:%s:%s', YYYY, MM, DD, hh, mm, ss)) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 4))
		}
		wx.TextCtrl(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			this.textLog = ctrl
		}
		this.timer = wx.Timer(this, TimerId)
		this.Bind(wx.EVT_TIMER, this.TimerId) {|event| this.OnTimer(event)}
		this.UpdateSample()
	}
	OnText(event:wx.CommandEvent) = {
		this.timer.Start(500, true)
	}
	OnTimer(event:wx.TimerEvent) = {
		this.UpdateSample()
	}
	UpdateSample() = {
		strTmpl = this.textEnter.GetValue()
		try {
			str = strTmpl.embed()
			this.textLog.SetForegroundColour(wx.BLACK)
			this.textLog.SetValue(str)
		} catch {|e|
			this.textLog.SetForegroundColour(wx.RED)
			this.textLog.SetValue(e.text)
		}
	}
}

PatternEditorFrame = class(wx.Frame) {
	__init__(pos:wx.Point => wx.DefaultPosition) = \
					{|nil, wx.ID_ANY, 'Pattern Editor'$, pos, wx.Size(800, 300)|
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		menuBar = wx.MenuBar()
		PatternEditorPanel(this)
		this.SetMenuBar(menuBar)
	}
}

ImageInfo = struct(pathName:string, image:image:nil):map

ContainerInfo = struct(dirName:string, dirNameTop, imageInfos[]:ImageInfo,
					   y:number, rcExpand:wx.Rect, expandFlag:boolean)

ImageViewer = class(wx.Panel) {
	TimerId = 1
	sizeThumbnail = 180
	wdSkip = 8, htSkip = 8
	htSeparator = 20
	wdMgnLeft = 20, wdMgnRight = 4
	htMgnTop = 4, htMgnBottom = 8
	__init__(parent:wx.Windowm, style:number) = \
						{|parent, style => (style | wx.HSCROLL | wx.VSCROLL)|
		this.bmpScreen = nil
		this.brushBg = wx.Brush(wx.WHITE, wx.BRUSHSTYLE_SOLID)
		this.brushSlot = wx.Brush(wx.Colour(200, 200, 200), wx.BRUSHSTYLE_SOLID)
		this.brushSeparator = wx.Brush(wx.Colour(240, 240, 240), wx.BRUSHSTYLE_SOLID)
		this.containerInfos = []
		this.timer = wx.Timer(this, TimerId)
		this.imageInfoQue = []
		this.font = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
							wx.FONTWEIGHT_BOLD)
		this.fontUL = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
							  wx.FONTWEIGHT_NORMAL)
		this.fontUL.SetUnderlined(true)
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_TIMER, this.TimerId) {|event| this.OnTimer(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_SCROLLWIN) {|event| this.OnScrollWin(event)}
		this.Bind(wx.EVT_MOUSEWHEEL) {|event| this.OnMouseWheel(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
		this.Bind(wx.EVT_IDLE) {|event| this.OnIdle(event)}
	}
	UpdateContainerInfos(dirNameTop:string) = {
		dirNames = (path.walk(dirNameTop, 1, '*'):dir).sort(`descend):list
		this.containerInfos = dirNames.each():xlist {|dirName|
			pathNames = [path.dir(dirName, '*.JPG', '*.jpg', '*.JPEG', '*.jpeg')]
			pathNames.isempty() && continue
			ContainerInfo(dirName.chop(), dirNameTop,
						  ImageInfo(pathNames, nil), 0, wx.Rect(0, 0, 10, 20), false)
		}
	}
	UpdateContent() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		y = 0
		nCols = int((wdClient - (wdMgnLeft + wdMgnRight) + wdSkip) / (sizeThumbnail + wdSkip))
		this.containerInfos.each {|containerInfo|
			containerInfo.y = y
			containerInfo.rcExpand.y = y
			y += htSeparator
			if (containerInfo.expandFlag) {
				y += htMgnTop
				nRows = int((containerInfo.imageInfos.len() + nCols - 1) / nCols)
				htImages = nRows * sizeThumbnail
				if (nRows > 1) { htImages += (nRows - 1) * htSkip }
				y += htImages
			}
			y += htMgnBottom
		}
		htRequired = y
		htScreen = max(htClient, htRequired)
		this.bmpScreen = wx.BitmapWH(wdClient, htScreen)
		dc = wx.MemoryDC(this.bmpScreen)
		dc.SetBackground(this.brushBg)
		dc.Clear()
		dc.SetPen(wx.NullPen)
		dc.SetBrush(this.brushSlot)
		dc.SetFont(this.font)
		this.containerInfos.each {|containerInfo|
			y = containerInfo.y
			imageInfos = containerInfo.imageInfos
			dc.SetBrush(this.brushSeparator)
			dc.DrawRectangle(0, y, wdClient, htSeparator)
			dc.DrawText(cond(containerInfo.expandFlag, '-', '+'), 0, y)
			str = containerInfo.dirName.mid(containerInfo.dirNameTop.len() + 1)
			if (m = str.match(r'(.*)#\d*')) {
				str = m[1]
				dc.SetTextForeground(wx.BLACK)
				dc.DrawText(str, 20, y)
				[wdStr, htStr] = dc.GetTextExtent(str)
				dc.SetFont(this.fontUL)
				dc.SetTextForeground(wx.Colour(0, 0, 255))
				dc.DrawText('Click to Fill Name'$, 20 + wdStr, y)
				dc.SetFont(this.font)
				dc.SetTextForeground(wx.BLACK)
			} else {
				dc.DrawText(str, 20, y)
			}
			str = format('%d images'$, containerInfo.imageInfos.len())
			[wdStr, htStr] = dc.GetTextExtent(str)
			dc.DrawText(str, wdClient - wdStr, y)
			if (containerInfo.expandFlag) {
				xsSlot = wdMgnLeft + \
					(range(imageInfos.len()) % nCols) * (sizeThumbnail + wdSkip)
				ysSlot = y + htSeparator + htMgnTop + \
					int(range(imageInfos.len()) / nCols) * (sizeThumbnail + htSkip)
				dc.DrawRectangle(xsSlot, ysSlot, sizeThumbnail, sizeThumbnail)
				for (imageInfo in imageInfos, xSlot in xsSlot, ySlot in ysSlot) {
					!imageInfo.image && continue
					xImage = xSlot + (sizeThumbnail - imageInfo.image.width) / 2
					yImage = ySlot + (sizeThumbnail - imageInfo.image.height) / 2
					dc.DrawBitmap(imageInfo.image, xImage, yImage, false)
				}
			}
		}
		this.SetScrollbar(wx.VERTICAL, this.GetScrollPos(wx.VERTICAL), htClient, htScreen)
		this.Refresh()
		this.Update()
	}
	SenseBox(pt:wx.Position, clickFlag:boolean) = {
		x = pt.x, y = pt.y + this.GetScrollPos(wx.VERTICAL)
		idx = this.containerInfos:*rcExpand:*ContainsXY(x, y).find():index
		if (idx) {
			if (clickFlag) {
				containerInfo = this.containerInfos[idx]
				containerInfo.expandFlag = !containerInfo.expandFlag
				if (containerInfo.expandFlag) {
					this.imageInfoQue.append(containerInfo.imageInfos)
				}
			}
			`expandButton
		} else {
			`none
		}
	}
	OnLeftDown(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition(), true)
		this.UpdateContent()
	}
	OnLeftUp(event:wx.MouseEvent) = {
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition(), false)
		if (rtn == `expandButton) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_HAND))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
	}
	OnSize(event:wx.SizeEvent) = {
		this.timer.Start(300, true)
		event.Skip()
	}
	OnTimer(event:wx.TimerEvent) = {
		this.UpdateContent()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		if (this.bmpScreen) {
			x = this.GetScrollPos(wx.HORIZONTAL)
			y = this.GetScrollPos(wx.VERTICAL)
			dc.DrawBitmap(this.bmpScreen, -x, -y, false)
		}
		dc = nil
	}
	OnScrollWin(event:wx.ScrollWinEvent) = {
		eventType = event.GetEventType()
		orientation = event.GetOrientation()
		if (eventType == wx.EVT_SCROLLWIN_TOP.GetEventType()) {
			pos = 0
		} elsif (eventType == wx.EVT_SCROLLWIN_BOTTOM.GetEventType()) {
			pos = this.GetScrollRange(orientation)
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 10
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 10
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 100
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 100
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBTRACK.GetEventType()) {
			pos = event.GetPosition()
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBRELEASE.GetEventType()) {
			pos = event.GetPosition()
		}
		this.SetScrollPos(orientation, pos)
		this.Refresh()
	}
	OnMouseWheel(event:wx.MouseEvent) = {
		orientation = wx.VERTICAL
		rot = event.GetWheelRotation()
		pos = this.GetScrollPos(orientation)
		if (rot < 0) {
			this.SetScrollPos(orientation, pos + 10)
			this.Refresh()
		} elsif (rot > 0) {
			this.SetScrollPos(orientation, pos - 10)
			this.Refresh()
		}
	}
	OnIdle(event:wx.IdleEvent) = {
		this.imageInfoQue.isempty() && return
		repeat (10) {
			this.imageInfoQue.isempty() && break
			imageInfo = this.imageInfoQue[0]
			this.imageInfoQue.erase(0)
			imageInfo.image = image(imageInfo.pathName).thumbnail(sizeThumbnail):box
		}
		this.UpdateContent()
	}
}

MainPanel = class(wx.Panel) {
	__init__(parent:wx.Windowm) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		wx.FlexGridSizer(nil, 3, 4, 4) {|gbox|
			gbox.AddGrowableCol(1, 1)
			vbox.Add(gbox, wx.SizerFlags().Expand())
			wx.StaticText(this, wx.ID_ANY, 'Media Folder'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
			}
			wx.TextCtrl(this, wx.ID_ANY) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
				this.textMedia = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Browse'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_MediaBrowse(event)
				}
			}
			wx.StaticText(this, wx.ID_ANY, 'Storage Folder'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
			}
			wx.TextCtrl(this, wx.ID_ANY, wx.GetApp().cfg['dirNameStorage']) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
				this.textStorage = ctrl
			}
			wx.Button(this, wx.ID_ANY, 'Browse'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
				this.Bind(wx.EVT_BUTTON, ctrl.GetId()) {|event|
					this.OnBtn_StorageBrowse(event)
				}
			}
			wx.StaticText(this, wx.ID_ANY, 'Pattern'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
			}
			wx.StaticText(this, wx.ID_ANY, '', style => wx.SUNKEN_BORDER) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags().Expand())
			}
			wx.Button(this, wx.ID_ANY, 'Edit'$) {|ctrl|
				gbox.Add(ctrl, wx.SizerFlags())
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			wx.Button(this, wx.ID_ANY, 'Run'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
			}
			wx.Gauge(this, wx.ID_ANY, 100, style => wx.GA_HORIZONTAL) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.LEFT, 4))
			}
		}
		ImageViewer(this, style => wx.SUNKEN_BORDER) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 4))
			this.imageViewer = ctrl
		}
		this.imageViewer.UpdateContainerInfos(wx.GetApp().cfg['dirNameStorage'])
	}
	OnBtn_MediaBrowse(event:wx.CommandEvent) = {
	}
	OnBtn_StorageBrowse(event:wx.CommandEvent) = {
		dirName = this.textStorage.GetValue()
		style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
		dlg = wx.DirDialog(this, 'Choose a storage folder'$, dirName, style)
		if (dlg.ShowModal() == wx.ID_OK) {
			dirName = dlg.GetPath()
			wx.GetApp().cfg['dirNameStorage'] = dirName
			this.textStorage.SetValue(dirName)
			this.imageViewer.UpdateContainerInfos(dirName)
			this.imageViewer.UpdateContent()
		}
	}
}

MainFrame = class(wx.Frame) {
	__init__(pos:wx.Point => wx.DefaultPosition) = \
					{|nil, wx.ID_ANY, 'Getter Photo', pos, wx.Size(800, 600)|
		this.SetIcon(wx.IconFromXPMData(resource.sample_xpm))
		menuBar = wx.MenuBar()
		MainPanel(this)
		this.SetMenuBar(menuBar)
	}
}


wx.IMPLEMENT_APP(App)
